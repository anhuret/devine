#!/bin/sh

SAFE="/data/safe"
FORT="/data/fort"
NAME="vault"
VLT="${SAFE}/${NAME}"
BKP="${FORT}/backup"
STG="${HOME}/stage"
MNT="${HOME}/${NAME}"

STP="$(date +%y%m%d%H%M)"
RET="10"

function help {
  echo "Options:"
  echo -e "\t-r - restore latest vault"
  echo -e "\t-b - backup vault"
  echo -e "\t-g - encrypt glyphs only"
  echo -e "\t-s - sync latest backup"
  echo -e "\t-c - clean old saves"
}

function glyph {
  echo "info: glyphs"

  if ! ls $STG $MNT $SAFE &>/dev/null; then
    echo "error: directories missing"
    exit 1
  fi

  cd $SAFE
  local name_stp=$(ls -d -1 ${NAME}.* | grep '[[:digit:]]$' | head -n 1 | cut -d'.' -f2)

  local name="glyphs"
  local file=${name}.${name_stp}.txz
  local crypt=${file}.asc

  if ! mountpoint -q $MNT; then
    echo "error: vault not mounted"
    exit 1
  fi

  cd $MNT
  if [[ $(pwd) != $MNT ]] || [[ ! -d $name ]]; then
    echo "error: $name not found"
    exit 1
  fi

  tar -cJf $file $name
  if [[ $? != 0 ]] || [[ ! -f $file ]]; then
    echo "error: archive file"
    exit 1
  fi

  gpg -sea $file
  if [[ $? != 0 ]] || [[ ! -f $crypt ]] || [[ ! -s $crypt ]]; then
    echo "error: encrypt file"
    rm -f $file $crypt
    exit 1
  else  
    cat $crypt
    mv $crypt ${STG}/${crypt}
  fi

  if [[ -f ${STG}/${crypt} ]]; then
    echo "info: success"
  else
    echo "error: move $crypt"
  fi
  rm -f $file $crypt
}

function backup {
  echo "info: backup"

  if ! ls $VLT $BKP &>/dev/null; then
    echo "error: directories"
    exit 1
  fi

  if mountpoint -q $MNT; then
    echo "error: vault is mounted"
    exit 1
  fi

  cd $SAFE
  local file=${BKP}/${NAME}.${STP}.txz
  tar -chJvf $file $NAME
  if [[ $? != 0 ]]; then
    echo "error: archive"
    rm -f $file
    exit 1
  fi
  echo "info: success"

  local count=$(ls -1 ${BKP}/${NAME}* | wc -l)
  if [[ $count -gt $RET ]]; then
    echo "info: shave"
    rm -f $(ls -1r ${BKP}/${NAME}* | tail -n +${RET})
  fi
  echo "info: list files"
  ls -1r ${BKP}/${NAME}*
}

function restore {
  echo "info: restore"

  if ! ls $BKP &>/dev/null; then
    echo "error: directories missing"
    exit 1
  fi

  cd $SAFE
  if [[ -L $NAME ]]; then
    echo "info: remove vault link"
    rm -f $NAME
  fi

  local name=$(ls -d -1 ${NAME}.* | grep '[[:digit:]]$' | head -n 1)
  local first=$(ls -1r $BKP | head -n 1)
  local first_stp=$(echo $first | cut -d'.' -f2)
  local save=0
  local res=0

  if [[ -d $name ]]; then
    echo "warn: vault present: save"
    mv $name ${name}.save
    if [[ $? != 0 ]]; then
      echo "error: save vault"
      exit 1
    else
      save=1
    fi
  fi

  echo "info: restore $first"
  tar -xJvf ${BKP}/${first}
  if [[ ! -d $VLT ]]; then
    echo "error: restore $first"
    if [[ $save == 1 ]]; then
      echo "info: restore saved"
      if [[ ! -d $name ]]; then
        mv ${name}.save $name
      fi
    fi
  else
    echo "info: link vault"
    mv $NAME ${NAME}.${first_stp}
    r=$?
    ln -s ${NAME}.${first_stp} $NAME
    r=$?
    if [[ $r == 0 ]]; then
      echo "info: success"
    else
      echo "error: link vault"
    fi
  fi
}

function sync {
  echo "info: check latest"

  cd $SAFE
  if [[ -L $NAME ]]; then
    echo "info: remove vault link"
    rm -f $NAME
  fi

  local name=$(ls -d -1 ${NAME}.* | grep '[[:digit:]]$' | head -n 1)
  local name_stp=$(echo $name | cut -d'.' -f2)
  local first=$(ls -1r $BKP | head -n 1)
  local first_stp=$(echo $first | cut -d'.' -f2)

  if [[ $first_stp -gt $name_stp ]]; then
    echo "info: sync latest backup"
    restore
  else
    echo "info: up to date: link"
    cd $SAFE
    ln -s $name $NAME
  fi
}

function clean {
  echo "info: clean old saves"
  cd $SAFE
  rm -rf *.save
}

# Main #

case $1 in
  "-g")
    glyph
    ;;
  "-r")
    restore
    ;;
  "-b")
    backup
    ;;
  "-s")
    sync
    ;;
  "-c")
    clean
    ;;
  *)
    help
    ;;
esac
